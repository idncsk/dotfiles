#####################
# Utils             #
#####################
function mkdirp() { mkdir -p "$@" && cd "$_" || exit 1; }

# Roaming bashrc profile
function sshrc() {
	BASHRC=$(cat ${HOME}/.bashrc_roaming | base64 -w 0)
	ssh -t $@ "echo \"${BASHRC}\" | base64 --decode > ~/.bashrc_roaming; \
	bash --rcfile ~/.bashrc_roaming; \
	rm ~/.bashrc_roaming";
}

# Directory tree
function t() {
	if [ -z $2 ]; then
		tree -AdL ${1:-1};
	else
		tree -AdL ${1:-1} "$2";
	fi;
}

function resetSshConnections() {
	kill $(ps -axf  | grep mux | grep -v grep | awk '{print $1}') &>/dev/null && echo "OK RT:$?" || echo "NOK RT:$?"
}

unsetHttpProxy() {
    for proxy in $(env | grep -i "http*._proxy" | awk -F= '{print $1}'); do
        unset "$proxy";
    done;
}


#####################
# Git	            #
#####################
function parse_git_dirty () {
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}

function parse_git_branch () {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}


#####################
# System			#
#####################
hasEFI() {
    test -d /sys/firmware/efi
}

hasVPN() {
    ip route show default | grep "tun\|tap\|ppp\|xl2tp\|zcctun" &>/dev/null
}

hasWifi() {
    grep up /sys/class/net/w*/operstate &>/dev/null
}

hasEth() {
    grep up /sys/class/net/e*/operstate &>/dev/null
}

function _calcram() {
	local sum
  	sum=0
  	for i in `ps aux | grep -i "$1" | grep -v "grep" | awk '{print $6}'`; do
    	sum=$(($i + $sum))
  	done
  	sum=$(echo "scale=2; $sum / 1024.0" | bc)
  	echo $sum
}

# Show how much RAM application uses.
# $ ram safari
# # => safari uses 154.69 MBs of RAM
# TODO: Fix colors
function ram_usage() {
	local sum
	local app="$1"
	if [ -z "$app" ]; then
		echo "First argument - pattern to grep from processes"
		return 0
	fi

  	sum=$(_calcram $app)
  	if [[ $sum != "0" ]]; then
	    echo "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM"
  else
    	echo "No active processes matching pattern '${fg[blue]}${app}${reset_color}'"
  fi
}

# Same, but tracks RAM usage in realtime. Will run until you stop it.
# $ rams safari
function ram_usage_realtime() {
	local sum
	local app="$1"
	if [ -z "$app" ]; then
    	echo "First argument - pattern to grep from processes"
    	return 0
  	fi

	while true; do
    	sum=$(_calcram $app)
    	if [[ $sum != "0" ]]; then
      		echo -en "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM\r"
    	else
      		echo -en "No active processes matching pattern '${fg[blue]}${app}${reset_color}'\r"
    	fi
    	sleep 1
  	done
}

function enableZRAM() {
	if [ $(cat /proc/swaps | tail -n +2 | grep "zram[0-9]") ]; then
		echo "ZRAM devices already found active on the system";
		cat /proc/swaps | tail -n +2 | grep "zram[0-9]";
		return
	fi;
	echo "Creating ZRAM devices.."
	sudo modprobe lz4
	sudo modprobe zram num_devices=$(nproc --all)
	for c in $(seq 0 $(nproc --all --ignore=1)); do
		#zramctl --size 512M -a lz4 /dev/zram$c && mkswap -L ZRAM$c /dev/zram$c && swapon -p1 LABEL=ZRAM$c;
		sudo zramen -a lz4 -s 25 make
	done;
}

function disableZRAM() {
	echo "Removing all ZRAM devices.. (TODO)"
	sudo zramen toss
}

function enableIPv6 {
	sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0
	sudo sysctl -w net.ipv6.conf.default.disable_ipv6=0
	sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=0
}

function disableIPv6 {
	sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
	sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1
	sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=1
}

#####################
# NodeJS			#
#####################
function remove-node-modules() {
	find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +
}


#####################
# Socks proxy		#
#####################
function socks() {

	screenName="ts"
	if [[ "$(screen -list | grep "\.$screenName")" ]]; then
		echo "Screen with the name \"$screenName\" already running, try screen -rd $screenName"
		echo "Matched:"
		screen -list | grep "\.$screenName"
	else
		echo "Starting socket proxy screen session \"$screenName\""
		screen -dmS ts bash -c "while true; do ssh ark1s; done;"
		screen -list | grep "\.$screenName"
	fi;

}


#####################
# Temporary TODO	#
#####################
function todo() {
	OLDIFS=$IFS
	IFS=$'\n'

	DIR_CURRENT=$XDG_DESKTOP_DIR/TODO.list
	DIR_ARCHIVE=$DIR_CURRENT/archive
	if [ ! -d $DIR_CURRENT ]; then mkdir -p $DIR_CURRENT; fi;
	if [ ! -d $DIR_ARCHIVE ]; then mkdir -p $DIR_ARCHIVE; fi;

	LIST_REPO=$DIR_CURRENT/TODO.repo
	LIST_TODO=$DIR_CURRENT/TODO.list
	LIST_DONE=$DIR_ARCHIVE/done.$(date +%Y)
	if [ ! -f $LIST_REPO ]; then touch $LIST_REPO; fi;
	if [ ! -f $LIST_TODO ]; then touch $LIST_TODO; fi;
	if [ ! -f $LIST_DONE ]; then touch $LIST_DONE; fi;

	# no parm, just echo the list
	if [ -z "$1" ]; then
		echo "${BOLD}[todo list]$RESET"
		COUNTER=1
		for line in `cat $LIST_TODO | awk -F\; '{print $3}'`; do
			echo "$COUNTER: $line"
			let "COUNTER++"
		done

	else

		case "$1" in
			"edit")
				exec $EDITOR $LIST_TODO
				;;

			"done")
				if [ -z "$2" ]; then

					if [ ! -f "$LIST_DONE" ] || [ `cat $LIST_DONE | wc -l` == 0 ]; then
						echo "[warning] Looks like you don't have any .. ";
					else
						cat $LIST_DONE
					fi;
				elif ! [[ "$2" =~ ^[0-9]+$ ]] ||
					[ "$2" -gt `cat $LIST_TODO | wc -l` ]; then
					echo "Invalid task number"
				else
					task=`sed "$2q;d" $LIST_TODO`
					sed -i "$2d" $LIST_TODO
					echo "$(date +%Y%m%d);$(date +%H:%M:%S);$task" >> $LIST_DONE
					todo
					echo "[info] Task "$2" marked as done"
				fi;
				;;

			"del")
				if [ -z "$2" ] ||
				 ! [[ "$2" =~ ^[0-9]+$ ]] ||
				 [ "$2" -gt `cat $LIST_TODO | wc -l` ]; then
					echo "[error] Invalid task number"
				else
					sed -i "$2d" $LIST_TODO
					todo
					echo "[info] Task "$2" removed from the list"
				fi;
				;;

			"add")
				if [ -z "$2" ]; then
					echo "[warning] Please enter a task description"
				else
					shift
					echo "$(date +%Y%m%d);$(date +%H:%M:%S);${@}" >> $LIST_TODO
					todo
					#echo "[info] Task added to the list"
				fi;
				;;

			"sort")
				echo "[info] Reordering todo list alphabetically.."
				sort -dfi -k3 -t";" $LIST_TODO | awk -F\; '{print $3}' #-o $LIST_TODO
				;;

			"stats")
				T_Y=`cat $LIST_DONE | wc -l`
				T_M=`cat $LIST_DONE | grep $(date +%Y%m) | wc -l`
				T_W=0
				T_D=`cat $LIST_DONE | grep $(date +%Y%m%d) | wc -l`
				T_TD=`cat $LIST_TODO | wc -l`
				echo "[Tasks]"
				echo -e "Today:\t$T_D / $T_TD (completed / todo)"
				echo -e "Year:\t$T_Y"
				echo -e "Month:\t$T_M"
				echo -e "Week:\t$T_W"
				;;

			*)
				echo "Usage:"
				echo -e " ${BOLD}todo add <task_description>$RESET - entry will be appended to \$LIST_TODO"
				echo -e " ${BOLD}todo done <task_number>$RESET - entry will be moved to \$LIST_DONE"
				echo -e " ${BOLD}todo del <task_number>$RESET - entry will be removed from list"
				echo -e " ${BOLD}todo sort$RESET - sort \$LIST_TODO alphabetically in-place"
				echo -e " ${BOLD}todo repo$RESET - show long-term tasks / task repository"
				echo -e "\t${BOLD}todo repo add <task_description>$RESET - add entry to task repo"
				echo -e "\t${BOLD}todo repo move <task_number>$RESET - move item to your tasklist"
				echo -e "\t${BOLD}todo repo del <task_number>$RESET - remove item from the longterm list"
				echo -e "\t${BOLD}todo repo sort$RESET - sort alphabetically"
				;;

		esac

	fi

	IFS=$OLDIFS

}

# Bling-bling
function setColorTheme() {
	if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then TERM=gnome-256color; fi
	if tput setaf 1 &> /dev/null; then
		tput sgr0
		if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
			BASE03=$(tput setaf 234)
			BASE02=$(tput setaf 235)
			BASE01=$(tput setaf 240)
			BASE00=$(tput setaf 241)
			BASE0=$(tput setaf 244)
			BASE0=$(tput setaf 244)
			BASE1=$(tput setaf 245)
			BASE2=$(tput setaf 254)
			BASE3=$(tput setaf 230)
			YELLOW=$(tput setaf 136)
			ORANGE=$(tput setaf 166)
			RED=$(tput setaf 160)
			MAGENTA=$(tput setaf 125)
			VIOLET=$(tput setaf 61)
			BLUE=$(tput setaf 33)
			CYAN=$(tput setaf 37)
			GREEN=$(tput setaf 64)
		else
			BASE03=$(tput setaf 8)
			BASE02=$(tput setaf 0)
			BASE01=$(tput setaf 10)
			BASE00=$(tput setaf 11)
			BASE0=$(tput setaf 12)
			BASE1=$(tput setaf 14)
			BASE2=$(tput setaf 7)
			BASE3=$(tput setaf 15)
			YELLOW=$(tput setaf 3)
			ORANGE=$(tput setaf 9)
			RED=$(tput setaf 1)
			MAGENTA=$(tput setaf 5)
			VIOLET=$(tput setaf 13)
			BLUE=$(tput setaf 4)
			CYAN=$(tput setaf 6)
			GREEN=$(tput setaf 2)
		fi
		BOLD=$(tput bold)
		RESET=$(tput sgr0)
	else
		# Linux console colors. I don't have the energy
		# to figure out the Solarized values
		MAGENTA="\033[1;31m"
		ORANGE="\033[1;33m"
		GREEN="\033[1;32m"
		PURPLE="\033[1;35m"
		WHITE="\033[1;37m"
		BOLD=""
		RESET="\033[m"
	fi
}

function refresh_xfce4_cache() {
	echo "Recreating local font cache from ~/.fonts"
	fc-cache -fv

	echo "Recreating local icon cache from ~/.icons"
	for d in ~/.icons/*/; do
		gtk-update-icon-cache -f -t "$d"
	done

	echo "Recreating gdk module cache"
	sudo gdk-pixbuf-query-loaders --update-cache
}
